name: Build and Release

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0

jobs:
  build-windows-linux:
    name: Build Windows and Linux
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc libgl1-mesa-dev xorg-dev

      - name: Install fyne-cross
        run: go install github.com/fyne-io/fyne-cross@latest

      - name: Build for Windows and Linux
        run: |
          fyne-cross windows -arch=amd64 -app-id com.github.jmervine.addonprofiles ./cmd/gui
          fyne-cross linux -arch=amd64 -app-id com.github.jmervine.addonprofiles ./cmd/gui

      - name: List build outputs
        run: |
          echo "Windows build output:"
          ls -lah fyne-cross/dist/windows-amd64/ || true
          echo "Linux build output:"
          ls -lah fyne-cross/dist/linux-amd64/ || true

      - name: Package binaries
        run: |
          mkdir -p release
          # Windows - find the .exe file
          cd fyne-cross/dist/windows-amd64
          EXE_FILE=$(ls *.exe | head -1)
          zip ../../../release/addonprofiles-manager-windows-amd64.zip "$EXE_FILE"
          cd ../../..
          
          # Linux - find the binary
          cd fyne-cross/dist/linux-amd64
          BIN_FILE=$(ls | grep -v "\.tar\|\.gz" | head -1)
          tar czf ../../../release/addonprofiles-manager-linux-amd64.tar.gz "$BIN_FILE"
          cd ../../..

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-linux-binaries
          path: release/*

  build-macos:
    name: Build macOS
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Build for macOS (Universal Binary)
        run: |
          # Build for both architectures
          GOOS=darwin GOARCH=amd64 CGO_ENABLED=1 go build -o addonprofiles-manager-amd64 ./cmd/gui
          GOOS=darwin GOARCH=arm64 CGO_ENABLED=1 go build -o addonprofiles-manager-arm64 ./cmd/gui
          
          # Create universal binary
          mkdir -p build
          lipo -create -output build/addonprofiles-manager addonprofiles-manager-amd64 addonprofiles-manager-arm64
          chmod +x build/addonprofiles-manager

      - name: Package binaries
        run: |
          mkdir -p release
          cd build
          tar czf ../release/addonprofiles-manager-macos-universal.tar.gz addonprofiles-manager
          cd ..

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-binaries
          path: release/*

  release:
    name: Create Release
    needs: [build-windows-linux, build-macos]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release files
        run: |
          mkdir -p release
          cp artifacts/windows-linux-binaries/* release/ || true
          cp artifacts/macos-binaries/* release/ || true
          ls -lah release/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: release/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

